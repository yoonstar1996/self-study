generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id           String       @id @default(uuid())
  email        String       @unique
  username     String       @unique
  phone        String?
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  deletedAt    DateTime?    @map("deleted_at")
  password     String
  profileImage String?      @map("profile_image")
  categories   Category[]   @relation("RegMemberCategories")
  memberRoles  MemberRole[]
  menuLikes    MenuLike[]
  menus        Menu[]       @relation("RegMemberMenus")

  @@map("members")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  createdAt   DateTime     @default(now()) @map("created_at")
  description String?
  memberRoles MemberRole[]

  @@map("roles")
}

model MemberRole {
  memberId  String   @map("member_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  member    Member   @relation(fields: [memberId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])

  @@id([memberId, roleId])
  @@map("member_roles")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  is_public   Boolean  @default(false) @map("is_public")
  order       Int      @default(0)
  regMemberId String   @map("reg_member_id")
  createdAt   DateTime @default(now()) @map("created_at")
  regMember   Member   @relation("RegMemberCategories", fields: [regMemberId], references: [id])
  menus       Menu[]

  @@map("categories")
}

model Menu {
  id          Int         @id @default(autoincrement())
  korName     String      @map("kor_name")
  engName     String      @map("eng_name")
  price       Float
  isPublic    Boolean     @default(false) @map("is_public")
  hasIce      Boolean     @default(true) @map("has_ice")
  hasHot      Boolean     @default(true) @map("has_hot")
  description String?
  createdAt   DateTime    @default(now())
  categoryId  Int         @map("category_id")
  regMemberId String      @map("reg_member_id")
  deletedAt   DateTime?   @map("deleted_at")
  updatedAt   DateTime?   @updatedAt @map("updated_at")
  images      MenuImage[] @relation("MenuImages")
  likes       MenuLike[]
  category    Category    @relation(fields: [categoryId], references: [id])
  regMember   Member      @relation("RegMemberMenus", fields: [regMemberId], references: [id])

  @@map("menus")
}

model MenuImage {
  id        Int     @id @default(autoincrement())
  name      String
  isDefault Boolean @default(false) @map("is_default")
  menuId    Int     @map("menu_id")
  menu      Menu    @relation("MenuImages", fields: [menuId], references: [id])

  @@map("menu_images")
}

model MenuLike {
  memberId  String   @map("member_id")
  menuId    Int      @map("menu_id")
  createdAt DateTime @default(now()) @map("created_at")
  member    Member   @relation(fields: [memberId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])

  @@id([memberId, menuId])
  @@map("menu_likes")
}
